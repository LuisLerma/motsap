CCS PCM C Compiler, Version 5.015, 5967               03-feb.-21 15:29

               Filename:   C:\Users\0bytes\Desktop\0bytes\Prototipo2\Modificasiones_2021\Version3\v4.lst

               ROM used:   1947 words (95%)
                           Largest free fragment is 101
               RAM used:   56 (25%) at main() level
                           105 (47%) worst case
               Stack used: 7 locations (4 in main + 3 for interrupts)
               Stack size: 8

*
0000:  MOVLW  07
0001:  MOVWF  0A
0002:  GOTO   72D
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   7F,W
0009:  MOVWF  20
000A:  MOVF   0A,W
000B:  MOVWF  27
000C:  CLRF   0A
000D:  SWAPF  20,F
000E:  MOVF   04,W
000F:  MOVWF  22
0010:  MOVF   77,W
0011:  MOVWF  23
0012:  MOVF   78,W
0013:  MOVWF  24
0014:  MOVF   79,W
0015:  MOVWF  25
0016:  MOVF   7A,W
0017:  MOVWF  26
0018:  BCF    03.7
0019:  BCF    03.5
001A:  BTFSS  0B.4
001B:  GOTO   01E
001C:  BTFSC  0B.1
001D:  GOTO   050
001E:  MOVLW  8C
001F:  MOVWF  04
0020:  BTFSS  00.5
0021:  GOTO   024
0022:  BTFSC  0C.5
0023:  GOTO   12C
0024:  MOVLW  8C
0025:  MOVWF  04
0026:  BTFSS  00.0
0027:  GOTO   02A
0028:  BTFSC  0C.0
0029:  GOTO   0AF
002A:  MOVF   22,W
002B:  MOVWF  04
002C:  MOVF   23,W
002D:  MOVWF  77
002E:  MOVF   24,W
002F:  MOVWF  78
0030:  MOVF   25,W
0031:  MOVWF  79
0032:  MOVF   26,W
0033:  MOVWF  7A
0034:  MOVF   27,W
0035:  MOVWF  0A
0036:  SWAPF  21,W
0037:  MOVWF  03
0038:  SWAPF  7F,F
0039:  SWAPF  7F,W
003A:  RETFIE
.................... //Prototipo bytes0//MOTSAP-BETA 
.................... //Ingeniero Luis Eduardo Lerma J. 
.................... //Agosto 2019 
....................  
.................... #include <16F628A.h> 
.................... //////////// Standard Header file for the PIC16F628A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F628A 
*
00EE:  BSF    03.5
00EF:  MOVF   27,W
00F0:  CLRF   78
00F1:  SUBWF  26,W
00F2:  BTFSC  03.0
00F3:  GOTO   0F7
00F4:  MOVF   26,W
00F5:  MOVWF  77
00F6:  GOTO   103
00F7:  CLRF   77
00F8:  MOVLW  08
00F9:  MOVWF  28
00FA:  RLF    26,F
00FB:  RLF    77,F
00FC:  MOVF   27,W
00FD:  SUBWF  77,W
00FE:  BTFSC  03.0
00FF:  MOVWF  77
0100:  RLF    78,F
0101:  DECFSZ 28,F
0102:  GOTO   0FA
0103:  BCF    03.5
0104:  RETURN
0105:  CLRF   77
0106:  CLRF   78
0107:  BSF    03.5
0108:  MOVF   20,W
0109:  BCF    03.0
010A:  BTFSC  21.0
010B:  ADDWF  77,F
010C:  RRF    77,F
010D:  RRF    78,F
010E:  BTFSC  21.1
010F:  ADDWF  77,F
0110:  RRF    77,F
0111:  RRF    78,F
0112:  BTFSC  21.2
0113:  ADDWF  77,F
0114:  RRF    77,F
0115:  RRF    78,F
0116:  BTFSC  21.3
0117:  ADDWF  77,F
0118:  RRF    77,F
0119:  RRF    78,F
011A:  BTFSC  21.4
011B:  ADDWF  77,F
011C:  RRF    77,F
011D:  RRF    78,F
011E:  BTFSC  21.5
011F:  ADDWF  77,F
0120:  RRF    77,F
0121:  RRF    78,F
0122:  BTFSC  21.6
0123:  ADDWF  77,F
0124:  RRF    77,F
0125:  RRF    78,F
0126:  BTFSC  21.7
0127:  ADDWF  77,F
0128:  RRF    77,F
0129:  RRF    78,F
012A:  BCF    03.5
012B:  RETURN
*
0245:  MOVLW  20
0246:  BTFSS  21.4
0247:  MOVLW  30
0248:  MOVWF  22
0249:  MOVF   20,W
024A:  MOVWF  77
024B:  BTFSS  20.7
024C:  GOTO   255
024D:  COMF   77,F
024E:  INCF   77,F
024F:  MOVF   77,W
0250:  MOVWF  20
0251:  MOVLW  2D
0252:  MOVWF  22
0253:  BSF    21.7
0254:  BSF    21.0
0255:  MOVF   20,W
0256:  MOVWF  26
0257:  MOVLW  64
0258:  MOVWF  27
0259:  BCF    03.5
025A:  CALL   0EE
025B:  MOVF   77,W
025C:  BSF    03.5
025D:  MOVWF  20
025E:  MOVLW  30
025F:  ADDWF  78,W
0260:  MOVWF  23
0261:  MOVF   20,W
0262:  MOVWF  26
0263:  MOVLW  0A
0264:  MOVWF  27
0265:  BCF    03.5
0266:  CALL   0EE
0267:  MOVLW  30
0268:  ADDWF  77,W
0269:  BSF    03.5
026A:  MOVWF  25
026B:  MOVLW  30
026C:  ADDWF  78,W
026D:  MOVWF  24
026E:  MOVF   22,W
026F:  MOVWF  77
0270:  MOVLW  30
0271:  SUBWF  23,W
0272:  BTFSC  03.2
0273:  GOTO   278
0274:  BSF    21.1
0275:  BTFSC  21.7
0276:  BSF    21.2
0277:  GOTO   28C
0278:  MOVF   22,W
0279:  MOVWF  23
027A:  MOVLW  20
027B:  MOVWF  22
027C:  MOVLW  30
027D:  SUBWF  24,W
027E:  BTFSC  03.2
027F:  GOTO   284
0280:  BSF    21.0
0281:  BTFSC  21.7
0282:  BSF    21.1
0283:  GOTO   28C
0284:  BTFSS  03.2
0285:  BSF    21.0
0286:  BTFSS  03.2
0287:  GOTO   28C
0288:  MOVF   23,W
0289:  MOVWF  24
028A:  MOVLW  20
028B:  MOVWF  23
028C:  BTFSC  21.2
028D:  GOTO   293
028E:  BTFSC  21.1
028F:  GOTO   299
0290:  BTFSC  21.0
0291:  GOTO   29F
0292:  GOTO   2A5
0293:  MOVF   22,W
0294:  BCF    03.5
0295:  BTFSS  0C.4
0296:  GOTO   295
0297:  MOVWF  19
0298:  BSF    03.5
0299:  MOVF   23,W
029A:  BCF    03.5
029B:  BTFSS  0C.4
029C:  GOTO   29B
029D:  MOVWF  19
029E:  BSF    03.5
029F:  MOVF   24,W
02A0:  BCF    03.5
02A1:  BTFSS  0C.4
02A2:  GOTO   2A1
02A3:  MOVWF  19
02A4:  BSF    03.5
02A5:  MOVF   25,W
02A6:  BCF    03.5
02A7:  BTFSS  0C.4
02A8:  GOTO   2A7
02A9:  MOVWF  19
....................  
.................... #list 
....................  
.................... #fuses XT, BROWNOUT, NOLVP, NOWDT, PUT, NOMCLR 
.................... #use delay(internal = 4MHz) 
*
003B:  MOVLW  A5
003C:  MOVWF  04
003D:  BCF    03.7
003E:  MOVF   00,W
003F:  BTFSC  03.2
0040:  GOTO   04F
0041:  MOVLW  01
0042:  MOVWF  78
0043:  CLRF   77
0044:  DECFSZ 77,F
0045:  GOTO   044
0046:  DECFSZ 78,F
0047:  GOTO   043
0048:  MOVLW  4A
0049:  MOVWF  77
004A:  DECFSZ 77,F
004B:  GOTO   04A
004C:  GOTO   04D
004D:  DECFSZ 00,F
004E:  GOTO   041
004F:  RETURN
.................... #use rs232(baud = 9600, parity = N, XMIT = PIN_B2, RCV = PIN_B1, bits = 8) 
.................... fast_io(A); 
.................... #define MFRC522_CS PIN_B4 
.................... #define MFRC522_SCK PIN_B5 
.................... #define MFRC522_SI PIN_B6 
.................... #define MFRC522_SO PIN_B7 
.................... #define MFRC522_RST PIN_A6 
.................... //! 
.................... #include <Lib_rc522.h> 
.................... #define PCD_IDLE              0x00               //NO action; Cancel the current command 
.................... #define PCD_AUTHENT           0x0E               //Authentication Key 
.................... #define PCD_RECEIVE           0x08               //Receive Data 
.................... #define PCD_TRANSMIT          0x04               //Transmit data 
.................... #define PCD_TRANSCEIVE        0x0C               //Transmit and receive data, 
.................... #define PCD_RESETPHASE        0x0F               //Reset 
.................... #define PCD_CALCCRC           0x03               //CRC Calculate 
....................  
.................... #define PICC_REQIDL          0x26               // find the antenna area does not enter hibernation 
.................... #define PICC_REQALL          0x52               // find all the cards antenna area 
.................... #define PICC_ANTICOLL        0x93               // anti-collision 
.................... #define PICC_SElECTTAG       0x93               // election card 
.................... #define PICC_AUTHENT1A       0x60               // authentication key A 
.................... #define PICC_AUTHENT1B       0x61               // authentication key B 
.................... #define PICC_READ            0x30               // Read Block 
.................... #define PICC_WRITE           0xA0               // write block 
.................... #define PICC_DECREMENT       0xC0               // debit 
.................... #define PICC_INCREMENT       0xC1               // recharge 
.................... #define PICC_RESTORE         0xC2               // transfer block data to the buffer 
.................... #define PICC_TRANSFER        0xB0               // save the data in the buffer 
.................... #define PICC_HALT            0x50               // Sleep 
....................  
.................... #define MI_OK                 0 
.................... #define MI_NOTAGERR           1 
.................... #define MI_ERR                2 
.................... //------------------MFRC522 Register--------------- 
....................  
.................... #define     RESERVED00            0x00     
.................... #define     COMMANDREG            0x01     
.................... #define     COMMIENREG            0x02     
.................... #define     DIVLENREG             0x03     
.................... #define     COMMIRQREG            0x04     
.................... #define     DIVIRQREG             0x05 
.................... #define     ERRORREG              0x06     
.................... #define     STATUS1REG            0x07     
.................... #define     STATUS2REG            0x08     
.................... #define     FIFODATAREG           0x09 
.................... #define     FIFOLEVELREG          0x0A 
.................... #define     WATERLEVELREG         0x0B 
.................... #define     CONTROLREG            0x0C 
.................... #define     BITFRAMINGREG         0x0D 
.................... #define     COLLREG               0x0E 
.................... #define     RESERVED01            0x0F 
.................... //PAGE 1:Command      
.................... #define     RESERVED10            0x10 
.................... #define     MODEREG               0x11 
.................... #define     TXMODEREG             0x12 
.................... #define     RXMODEREG             0x13 
.................... #define     TXCONTROLREG          0x14 
.................... #define     TXAUTOREG             0x15 
.................... #define     TXSELREG              0x16 
.................... #define     RXSELREG              0x17 
.................... #define     RXTHRESHOLDREG        0x18 
.................... #define     DEMODREG              0x19 
.................... #define     RESERVED11            0x1A 
.................... #define     RESERVED12            0x1B 
.................... #define     MIFAREREG             0x1C 
.................... #define     RESERVED13            0x1D 
.................... #define     RESERVED14            0x1E 
.................... #define     SERIALSPEEDREG        0x1F 
.................... //PAGE 2:CFG     
.................... #define     RESERVED20            0x20   
.................... #define     CRCRESULTREGM         0x21 
.................... #define     CRCRESULTREGL         0x22 
.................... #define     RESERVED21            0x23 
.................... #define     MODWIDTHREG           0x24 
.................... #define     RESERVED22            0x25 
.................... #define     RFCFGREG              0x26 
.................... #define     GSNREG                0x27 
.................... #define     CWGSPREG              0x28 
.................... #define     MODGSPREG             0x29 
.................... #define     TMODEREG              0x2A 
.................... #define     TPRESCALERREG         0x2B 
.................... #define     TRELOADREGH           0x2C 
.................... #define     TRELOADREGL           0x2D 
.................... #define     TCOUNTERVALUEREGH     0x2E 
.................... #define     TCOUNTERVALUEREGL     0x2F 
.................... //PAGE 3:TEST REGISTER      
.................... #define     RESERVED30            0x30 
.................... #define     TESTSEL1REG           0x31 
.................... #define     TESTSEL2REG           0x32 
.................... #define     TESTPINENREG          0x33 
.................... #define     TESTPINVALUEREG       0x34 
.................... #define     TESTBUSREG            0x35 
.................... #define     AUTOTESTREG           0x36 
.................... #define     VERSIONREG            0x37 
.................... #define     ANALOGTESTREG         0x38 
.................... #define     TESTDAC1REG           0x39   
.................... #define     TESTDAC2REG           0x3A    
.................... #define     TESTADCREG            0x3B    
.................... #define     RESERVED31            0x3C    
.................... #define     RESERVED32            0x3D    
.................... #define     RESERVED33            0x3E    
.................... #define     RESERVED34            0x3F 
....................  
.................... unsigned int8 MFRC522_Rd(unsigned int8 Address)   
*
03E2:  CLRF   6F
.................... { 
....................    unsigned int i, ucAddr; 
....................    unsigned int ucResult = 0; 
....................    output_bit (MFRC522_SCK, 0); 
03E3:  BCF    06.5
03E4:  BSF    03.5
03E5:  BCF    06.5
....................    output_bit (MFRC522_CS, 0); 
03E6:  BCF    03.5
03E7:  BCF    06.4
03E8:  BSF    03.5
03E9:  BCF    06.4
....................    ucAddr = ( (Address<<1)&0x7E)|0x80; 
03EA:  BCF    03.0
03EB:  BCF    03.5
03EC:  RLF    6C,W
03ED:  ANDLW  7E
03EE:  IORLW  80
03EF:  MOVWF  6E
....................  
....................    FOR (i = 8; i > 0; i--) 
03F0:  MOVLW  08
03F1:  MOVWF  6D
03F2:  MOVF   6D,F
03F3:  BTFSC  03.2
03F4:  GOTO   40C
....................    { 
....................       output_bit (MFRC522_SI, ((ucAddr&0x80) == 0x80)); 
03F5:  MOVF   6E,W
03F6:  ANDLW  80
03F7:  SUBLW  80
03F8:  BTFSC  03.2
03F9:  GOTO   3FC
03FA:  BCF    06.6
03FB:  GOTO   3FD
03FC:  BSF    06.6
03FD:  BSF    03.5
03FE:  BCF    06.6
....................       output_bit (MFRC522_SCK, 1); 
03FF:  BCF    03.5
0400:  BSF    06.5
0401:  BSF    03.5
0402:  BCF    06.5
....................       ucAddr <<= 1; 
0403:  BCF    03.0
0404:  BCF    03.5
0405:  RLF    6E,F
....................       output_bit (MFRC522_SCK, 0); 
0406:  BCF    06.5
0407:  BSF    03.5
0408:  BCF    06.5
0409:  BCF    03.5
040A:  DECF   6D,F
040B:  GOTO   3F2
....................    } 
....................  
....................    FOR (i = 8; i > 0; i--) 
040C:  MOVLW  08
040D:  MOVWF  6D
040E:  MOVF   6D,F
040F:  BTFSC  03.2
0410:  GOTO   424
....................    { 
....................       output_bit (MFRC522_SCK, 1); 
0411:  BSF    06.5
0412:  BSF    03.5
0413:  BCF    06.5
....................       ucResult <<= 1; 
0414:  BCF    03.0
0415:  BCF    03.5
0416:  RLF    6F,F
....................       ucResult|= (INT1) input (MFRC522_SO); 
0417:  BSF    03.5
0418:  BSF    06.7
0419:  MOVLW  00
041A:  BCF    03.5
041B:  BTFSC  06.7
041C:  MOVLW  01
041D:  IORWF  6F,F
....................       output_bit (MFRC522_SCK, 0); 
041E:  BCF    06.5
041F:  BSF    03.5
0420:  BCF    06.5
0421:  BCF    03.5
0422:  DECF   6D,F
0423:  GOTO   40E
....................    } 
....................  
....................     
....................    output_bit (MFRC522_CS, 1); 
0424:  BSF    06.4
0425:  BSF    03.5
0426:  BCF    06.4
....................    output_bit (MFRC522_SCK, 1); 
0427:  BCF    03.5
0428:  BSF    06.5
0429:  BSF    03.5
042A:  BCF    06.5
....................    RETURN ucResult; 
042B:  BCF    03.5
042C:  MOVF   6F,W
042D:  MOVWF  78
042E:  RETURN
.................... } 
....................  
.................... void MFRC522_Wr(unsigned int8 Address, unsigned int8 value) 
.................... { 
....................     
....................    unsigned int8 i, ucAddr; 
....................    output_bit (MFRC522_SCK, 0); 
*
0395:  BCF    06.5
0396:  BSF    03.5
0397:  BCF    06.5
....................    output_bit (MFRC522_CS, 0); 
0398:  BCF    03.5
0399:  BCF    06.4
039A:  BSF    03.5
039B:  BCF    06.4
....................    ucAddr = ( (Address<<1)&0x7E); 
039C:  BCF    03.0
039D:  BCF    03.5
039E:  RLF    6D,W
039F:  ANDLW  7E
03A0:  MOVWF  70
....................    FOR (i = 8; i > 0; i--) 
03A1:  MOVLW  08
03A2:  MOVWF  6F
03A3:  MOVF   6F,F
03A4:  BTFSC  03.2
03A5:  GOTO   3BD
....................    { 
....................       output_bit (MFRC522_SI, ( (ucAddr&0x80) == 0x80)); 
03A6:  MOVF   70,W
03A7:  ANDLW  80
03A8:  SUBLW  80
03A9:  BTFSC  03.2
03AA:  GOTO   3AD
03AB:  BCF    06.6
03AC:  GOTO   3AE
03AD:  BSF    06.6
03AE:  BSF    03.5
03AF:  BCF    06.6
....................       output_bit (MFRC522_SCK, 1); 
03B0:  BCF    03.5
03B1:  BSF    06.5
03B2:  BSF    03.5
03B3:  BCF    06.5
....................       ucAddr <<= 1; 
03B4:  BCF    03.0
03B5:  RLF    70,F
....................       output_bit (MFRC522_SCK, 0); 
03B6:  BCF    03.5
03B7:  BCF    06.5
03B8:  BSF    03.5
03B9:  BCF    06.5
03BA:  BCF    03.5
03BB:  DECF   6F,F
03BC:  GOTO   3A3
....................    } 
....................  
....................     
....................    FOR (i = 8; i > 0; i--) 
03BD:  MOVLW  08
03BE:  MOVWF  6F
03BF:  MOVF   6F,F
03C0:  BTFSC  03.2
03C1:  GOTO   3D9
....................    { 
....................       output_bit (MFRC522_SI, ( (value&0x80) == 0x80)); 
03C2:  MOVF   6E,W
03C3:  ANDLW  80
03C4:  SUBLW  80
03C5:  BTFSC  03.2
03C6:  GOTO   3C9
03C7:  BCF    06.6
03C8:  GOTO   3CA
03C9:  BSF    06.6
03CA:  BSF    03.5
03CB:  BCF    06.6
....................       output_bit (MFRC522_SCK, 1); 
03CC:  BCF    03.5
03CD:  BSF    06.5
03CE:  BSF    03.5
03CF:  BCF    06.5
....................       value <<= 1; 
03D0:  BCF    03.0
03D1:  BCF    03.5
03D2:  RLF    6E,F
....................       output_bit (MFRC522_SCK, 0); 
03D3:  BCF    06.5
03D4:  BSF    03.5
03D5:  BCF    06.5
03D6:  BCF    03.5
03D7:  DECF   6F,F
03D8:  GOTO   3BF
....................    } 
....................  
....................    output_bit (MFRC522_CS, 1); 
03D9:  BSF    06.4
03DA:  BSF    03.5
03DB:  BCF    06.4
....................    output_bit (MFRC522_SCK, 1); 
03DC:  BCF    03.5
03DD:  BSF    06.5
03DE:  BSF    03.5
03DF:  BCF    06.5
03E0:  BCF    03.5
03E1:  RETURN
.................... } 
.................... static void MFRC522_Clear_Bit( char addr, char mask ) 
*
042F:  CLRF   6B
.................... {     unsigned int8  tmp =0x0;  
....................       tmp=MFRC522_Rd( addr ) ; 
0430:  MOVF   69,W
0431:  MOVWF  6C
0432:  CALL   3E2
0433:  MOVF   78,W
0434:  MOVWF  6B
....................      MFRC522_Wr( addr,  tmp&~mask );     
0435:  MOVF   6A,W
0436:  XORLW  FF
0437:  ANDWF  6B,W
0438:  MOVWF  6C
0439:  MOVF   69,W
043A:  MOVWF  6D
043B:  MOVF   6C,W
043C:  MOVWF  6E
043D:  CALL   395
043E:  RETURN
.................... } 
.................... static void MFRC522_Set_Bit( char addr, char mask ) 
043F:  CLRF   6B
.................... {    unsigned int8  tmp =0x0;  
....................       tmp=MFRC522_Rd( addr ) ;   
0440:  MOVF   69,W
0441:  MOVWF  6C
0442:  CALL   3E2
0443:  MOVF   78,W
0444:  MOVWF  6B
....................      MFRC522_Wr( addr, tmp|mask ); 
0445:  MOVF   6B,W
0446:  IORWF  6A,W
0447:  MOVWF  6C
0448:  MOVF   69,W
0449:  MOVWF  6D
044A:  MOVF   6C,W
044B:  MOVWF  6E
044C:  CALL   395
044D:  RETURN
.................... } 
.................... void MFRC522_Reset() 
.................... {   
....................    output_bit (MFRC522_RST, 1) ; 
*
0455:  BCF    03.5
0456:  BSF    05.6
0457:  BSF    03.5
0458:  BCF    05.6
....................    delay_us (1); 
0459:  NOP
....................    output_bit (MFRC522_RST, 0) ; 
045A:  BCF    03.5
045B:  BCF    05.6
045C:  BSF    03.5
045D:  BCF    05.6
....................    delay_us (1); 
045E:  NOP
....................    output_bit (MFRC522_RST, 1) ; 
045F:  BCF    03.5
0460:  BSF    05.6
0461:  BSF    03.5
0462:  BCF    05.6
....................    delay_us (1); 
0463:  NOP
....................    MFRC522_Wr( COMMANDREG, PCD_RESETPHASE );  
0464:  MOVLW  01
0465:  BCF    03.5
0466:  MOVWF  6D
0467:  MOVLW  0F
0468:  MOVWF  6E
0469:  CALL   395
....................    delay_us (1); 
046A:  NOP
.................... } 
.................... void MFRC522_AntennaOn() 
.................... {                                                
.................... unsigned int8 stt; 
.................... stt= MFRC522_Rd( TXCONTROLREG ) ; 
*
048D:  MOVLW  14
048E:  MOVWF  6C
048F:  CALL   3E2
0490:  MOVF   78,W
0491:  MOVWF  52
.................... MFRC522_Set_Bit( TXCONTROLREG, 0x03 );  
0492:  MOVLW  14
0493:  MOVWF  69
0494:  MOVLW  03
0495:  MOVWF  6A
0496:  CALL   43F
.................... } 
.................... void MFRC522_AntennaOff() 
.................... { 
....................  MFRC522_Clear_Bit( TXCONTROLREG, 0x03 );                                            
*
0488:  MOVLW  14
0489:  MOVWF  69
048A:  MOVLW  03
048B:  MOVWF  6A
048C:  CALL   42F
.................... } 
.................... void MFRC522_Init()       
.................... { 
....................                                                                
....................     output_bit(MFRC522_CS , 1);   
*
044E:  BSF    06.4
044F:  BSF    03.5
0450:  BCF    06.4
....................     output_bit( MFRC522_RST , 1);  
0451:  BCF    03.5
0452:  BSF    05.6
0453:  BSF    03.5
0454:  BCF    05.6
....................      
....................      MFRC522_Reset();         
....................      MFRC522_Wr( TMODEREG, 0x8D );      //Tauto=1; f(Timer) = 6.78MHz/TPreScaler 
*
046B:  MOVLW  2A
046C:  MOVWF  6D
046D:  MOVLW  8D
046E:  MOVWF  6E
046F:  CALL   395
....................      MFRC522_Wr( TPRESCALERREG, 0x3E ); //TModeReg[3..0] + TPrescalerReg  
0470:  MOVLW  2B
0471:  MOVWF  6D
0472:  MOVLW  3E
0473:  MOVWF  6E
0474:  CALL   395
....................      MFRC522_Wr( TRELOADREGL, 30 );  
0475:  MOVLW  2D
0476:  MOVWF  6D
0477:  MOVLW  1E
0478:  MOVWF  6E
0479:  CALL   395
....................      MFRC522_Wr( TRELOADREGH, 0 );   
047A:  MOVLW  2C
047B:  MOVWF  6D
047C:  CLRF   6E
047D:  CALL   395
....................      MFRC522_Wr( TXAUTOREG, 0x40 );    //100%ASK 
047E:  MOVLW  15
047F:  MOVWF  6D
0480:  MOVLW  40
0481:  MOVWF  6E
0482:  CALL   395
....................      MFRC522_Wr( MODEREG, 0x3D );      // CRC valor inicial de 0x6363 
0483:  MOVLW  11
0484:  MOVWF  6D
0485:  MOVLW  3D
0486:  MOVWF  6E
0487:  CALL   395
....................          
....................     
....................      MFRC522_AntennaOff() ;              
....................      MFRC522_AntennaOn(); 
*
0497:  GOTO   76B (RETURN)
.................... } 
.................... char MFRC522_ToCard( char command, char *sendData, char sendLen, char *backData, unsigned *backLen ) 
0498:  MOVLW  02
0499:  MOVWF  63
049A:  CLRF   64
049B:  CLRF   65
.................... { 
....................   char _status = MI_ERR; 
....................   char irqEn = 0x00; 
....................   char waitIRq = 0x00;                 
....................   char lastBits; 
....................   char n; 
....................   unsigned i; 
....................    
....................   switch (command) 
049C:  MOVF   5B,W
049D:  XORLW  0E
049E:  BTFSC  03.2
049F:  GOTO   4A4
04A0:  XORLW  02
04A1:  BTFSC  03.2
04A2:  GOTO   4A9
04A3:  GOTO   4AE
....................   { 
....................     case PCD_AUTHENT:       //Certification cards close 
....................     { 
....................       irqEn = 0x12; 
04A4:  MOVLW  12
04A5:  MOVWF  64
....................       waitIRq = 0x10; 
04A6:  MOVLW  10
04A7:  MOVWF  65
....................       break; 
04A8:  GOTO   4AE
....................     } 
....................     case PCD_TRANSCEIVE:    //Transmit FIFO data 
....................     { 
....................       irqEn = 0x77; 
04A9:  MOVLW  77
04AA:  MOVWF  64
....................       waitIRq = 0x30; 
04AB:  MOVLW  30
04AC:  MOVWF  65
....................       break; 
04AD:  GOTO   4AE
....................     } 
....................     default: 
....................       break; 
....................   } 
....................   MFRC522_Wr( COMMIENREG, irqEn | 0x80 );  //Interrupt request 
04AE:  MOVF   64,W
04AF:  IORLW  80
04B0:  MOVWF  69
04B1:  MOVLW  02
04B2:  MOVWF  6D
04B3:  MOVF   69,W
04B4:  MOVWF  6E
04B5:  CALL   395
....................   MFRC522_Clear_Bit( COMMIRQREG, 0x80 );   //Clear all interrupt request bit 
04B6:  MOVLW  04
04B7:  MOVWF  69
04B8:  MOVLW  80
04B9:  MOVWF  6A
04BA:  CALL   42F
....................   MFRC522_Set_Bit( FIFOLEVELREG, 0x80 );   //FlushBuffer=1, FIFO Initialization 
04BB:  MOVLW  0A
04BC:  MOVWF  69
04BD:  MOVLW  80
04BE:  MOVWF  6A
04BF:  CALL   43F
....................   MFRC522_Wr( COMMANDREG, PCD_IDLE );      //NO action; Cancel the current command??? 
04C0:  MOVLW  01
04C1:  MOVWF  6D
04C2:  CLRF   6E
04C3:  CALL   395
....................    
....................    
....................    
....................    
....................   for ( i=0; i < sendLen; i++ ) 
04C4:  CLRF   68
04C5:  MOVF   5E,W
04C6:  SUBWF  68,W
04C7:  BTFSC  03.0
04C8:  GOTO   4D8
....................   { 
....................     MFRC522_Wr( FIFODATAREG, sendData[i] ); 
04C9:  MOVF   68,W
04CA:  ADDWF  5C,W
04CB:  MOVWF  04
04CC:  BCF    03.7
04CD:  BTFSC  5D.0
04CE:  BSF    03.7
04CF:  MOVF   00,W
04D0:  MOVWF  69
04D1:  MOVLW  09
04D2:  MOVWF  6D
04D3:  MOVF   69,W
04D4:  MOVWF  6E
04D5:  CALL   395
04D6:  INCF   68,F
04D7:  GOTO   4C5
....................   } 
....................    
....................   MFRC522_Wr( COMMANDREG, command ); 
04D8:  MOVLW  01
04D9:  MOVWF  6D
04DA:  MOVF   5B,W
04DB:  MOVWF  6E
04DC:  CALL   395
....................   if (command == PCD_TRANSCEIVE ) 
04DD:  MOVF   5B,W
04DE:  SUBLW  0C
04DF:  BTFSS  03.2
04E0:  GOTO   4E6
....................   { 
....................     MFRC522_Set_Bit( BITFRAMINGREG, 0x80 ); //StartSend=1,transmission of data starts   
04E1:  MOVLW  0D
04E2:  MOVWF  69
04E3:  MOVLW  80
04E4:  MOVWF  6A
04E5:  CALL   43F
....................   } 
....................   
....................   i = 0xFFFF;    
04E6:  MOVLW  FF
04E7:  MOVWF  68
....................   do 
....................   { 
....................   
....................     n = MFRC522_Rd( COMMIRQREG ); 
04E8:  MOVLW  04
04E9:  MOVWF  6C
04EA:  CALL   3E2
04EB:  MOVF   78,W
04EC:  MOVWF  67
....................     i--; 
04ED:  DECF   68,F
....................   } 
....................   while ( i && !(n & 0x01) && !( n & waitIRq ) ); 
04EE:  MOVF   68,F
04EF:  BTFSC  03.2
04F0:  GOTO   4F7
04F1:  BTFSC  67.0
04F2:  GOTO   4F7
04F3:  MOVF   67,W
04F4:  ANDWF  65,W
04F5:  BTFSC  03.2
04F6:  GOTO   4E8
....................   MFRC522_Clear_Bit( BITFRAMINGREG, 0x80 );     
04F7:  MOVLW  0D
04F8:  MOVWF  69
04F9:  MOVLW  80
04FA:  MOVWF  6A
04FB:  CALL   42F
....................   if (i != 0) 
04FC:  MOVF   68,F
04FD:  BTFSC  03.2
04FE:  GOTO   56F
....................   { 
....................     if( !( MFRC522_Rd( ERRORREG ) & 0x1B ) )  
04FF:  MOVLW  06
0500:  MOVWF  6C
0501:  CALL   3E2
0502:  MOVF   78,W
0503:  ANDLW  1B
0504:  BTFSS  03.2
0505:  GOTO   56D
....................     { 
....................       _status = MI_OK; 
0506:  CLRF   63
....................       if ( n & irqEn & 0x01 ) 
0507:  MOVF   67,W
0508:  ANDWF  64,W
0509:  ANDLW  01
050A:  BTFSC  03.2
050B:  GOTO   50E
....................       { 
....................         _status = MI_NOTAGERR;        
050C:  MOVLW  01
050D:  MOVWF  63
....................       } 
....................       if ( command == PCD_TRANSCEIVE ) 
050E:  MOVF   5B,W
050F:  SUBLW  0C
0510:  BTFSS  03.2
0511:  GOTO   56C
....................       { 
....................         n = MFRC522_Rd( FIFOLEVELREG ); 
0512:  MOVLW  0A
0513:  MOVWF  6C
0514:  CALL   3E2
0515:  MOVF   78,W
0516:  MOVWF  67
....................         lastBits = MFRC522_Rd( CONTROLREG ) & 0x07; 
0517:  MOVLW  0C
0518:  MOVWF  6C
0519:  CALL   3E2
051A:  MOVF   78,W
051B:  ANDLW  07
051C:  MOVWF  66
....................         if (lastBits) 
051D:  MOVF   66,F
051E:  BTFSC  03.2
051F:  GOTO   531
....................         { 
....................           *backLen = (n-1) * 8 + lastBits; 
0520:  MOVF   61,W
0521:  MOVWF  04
0522:  BCF    03.7
0523:  BTFSC  62.0
0524:  BSF    03.7
0525:  MOVLW  01
0526:  SUBWF  67,W
0527:  MOVWF  77
0528:  RLF    77,F
0529:  RLF    77,F
052A:  RLF    77,F
052B:  MOVLW  F8
052C:  ANDWF  77,F
052D:  MOVF   77,W
052E:  ADDWF  66,W
052F:  MOVWF  00
....................         } 
0530:  GOTO   53E
....................         else 
....................         { 
....................           *backLen = n * 8; 
0531:  MOVF   61,W
0532:  MOVWF  04
0533:  BCF    03.7
0534:  BTFSC  62.0
0535:  BSF    03.7
0536:  RLF    67,W
0537:  MOVWF  77
0538:  RLF    77,F
0539:  RLF    77,F
053A:  MOVLW  F8
053B:  ANDWF  77,F
053C:  MOVF   77,W
053D:  MOVWF  00
....................         } 
....................         if (n == 0) 
053E:  MOVF   67,F
053F:  BTFSS  03.2
0540:  GOTO   543
....................         { 
....................           n = 1; 
0541:  MOVLW  01
0542:  MOVWF  67
....................         } 
....................         if (n > 16) 
0543:  MOVF   67,W
0544:  SUBLW  10
0545:  BTFSC  03.0
0546:  GOTO   549
....................         { 
....................           n = 16; 
0547:  MOVLW  10
0548:  MOVWF  67
....................         } 
....................         
....................         for (i=0; i < n; i++) 
0549:  CLRF   68
054A:  MOVF   67,W
054B:  SUBWF  68,W
054C:  BTFSC  03.0
054D:  GOTO   565
....................         { 
....................           backData[i] = MFRC522_Rd( FIFODATAREG ); 
054E:  MOVF   68,W
054F:  ADDWF  5F,W
0550:  MOVWF  78
0551:  MOVF   60,W
0552:  MOVWF  7A
0553:  BTFSC  03.0
0554:  INCF   7A,F
0555:  MOVF   78,W
0556:  MOVWF  69
0557:  MOVF   7A,W
0558:  MOVWF  6A
0559:  MOVLW  09
055A:  MOVWF  6C
055B:  CALL   3E2
055C:  MOVF   69,W
055D:  MOVWF  04
055E:  BCF    03.7
055F:  BTFSC  6A.0
0560:  BSF    03.7
0561:  MOVF   78,W
0562:  MOVWF  00
0563:  INCF   68,F
0564:  GOTO   54A
....................         } 
....................    
....................   backData[i] = 0; 
0565:  MOVF   68,W
0566:  ADDWF  5F,W
0567:  MOVWF  04
0568:  BCF    03.7
0569:  BTFSC  60.0
056A:  BSF    03.7
056B:  CLRF   00
....................       } 
....................     } 
056C:  GOTO   56F
....................     else 
....................     { 
....................       _status = MI_ERR; 
056D:  MOVLW  02
056E:  MOVWF  63
....................     } 
....................   } 
....................   
....................   return _status; 
056F:  MOVF   63,W
0570:  MOVWF  78
0571:  RETURN
.................... } 
.................... char MFRC522_Request( char reqMode, char *TagType ) 
.................... { 
....................   char _status; 
....................   unsigned backBits;             
....................   MFRC522_Wr( BITFRAMINGREG, 0x07 );  
*
05BE:  MOVLW  0D
05BF:  MOVWF  6D
05C0:  MOVLW  07
05C1:  MOVWF  6E
05C2:  CALL   395
....................   TagType[0] = reqMode; 
05C3:  MOVF   55,W
05C4:  MOVWF  04
05C5:  BCF    03.7
05C6:  BTFSC  56.0
05C7:  BSF    03.7
05C8:  MOVF   54,W
05C9:  MOVWF  00
....................   _status = MFRC522_ToCard( PCD_TRANSCEIVE, TagType, 1, TagType, &backBits ); 
05CA:  MOVLW  0C
05CB:  MOVWF  5B
05CC:  MOVF   56,W
05CD:  MOVWF  5D
05CE:  MOVF   55,W
05CF:  MOVWF  5C
05D0:  MOVLW  01
05D1:  MOVWF  5E
05D2:  MOVF   56,W
05D3:  MOVWF  60
05D4:  MOVF   55,W
05D5:  MOVWF  5F
05D6:  CLRF   62
05D7:  MOVLW  58
05D8:  MOVWF  61
05D9:  CALL   498
05DA:  MOVF   78,W
05DB:  MOVWF  57
....................   if ( (_status != MI_OK) || (backBits != 0x10) ) 
05DC:  MOVF   57,F
05DD:  BTFSS  03.2
05DE:  GOTO   5E3
05DF:  MOVF   58,W
05E0:  SUBLW  10
05E1:  BTFSC  03.2
05E2:  GOTO   5E5
....................   { 
....................     _status = MI_ERR; 
05E3:  MOVLW  02
05E4:  MOVWF  57
....................   } 
....................   return _status; 
05E5:  MOVF   57,W
05E6:  MOVWF  78
.................... } 
.................... void MFRC522_CRC( char *dataIn, char length, char *dataOut ) 
.................... { 
.................... char i, n; 
....................     MFRC522_Clear_Bit( DIVIRQREG, 0x04 ); 
*
06BA:  MOVLW  05
06BB:  MOVWF  69
06BC:  MOVLW  04
06BD:  MOVWF  6A
06BE:  CALL   42F
....................     MFRC522_Set_Bit( FIFOLEVELREG, 0x80 );     
06BF:  MOVLW  0A
06C0:  MOVWF  69
06C1:  MOVLW  80
06C2:  MOVWF  6A
06C3:  CALL   43F
....................      
....................       
....................     for ( i = 0; i < length; i++ ) 
06C4:  CLRF   5C
06C5:  MOVF   59,W
06C6:  SUBWF  5C,W
06C7:  BTFSC  03.0
06C8:  GOTO   6DC
....................     {    
....................         MFRC522_Wr( FIFODATAREG, *dataIn++ );    
06C9:  MOVF   58,W
06CA:  MOVWF  7A
06CB:  MOVF   57,W
06CC:  INCF   57,F
06CD:  BTFSC  03.2
06CE:  INCF   58,F
06CF:  MOVWF  04
06D0:  BCF    03.7
06D1:  BTFSC  7A.0
06D2:  BSF    03.7
06D3:  MOVF   00,W
06D4:  MOVWF  5E
06D5:  MOVLW  09
06D6:  MOVWF  6D
06D7:  MOVF   5E,W
06D8:  MOVWF  6E
06D9:  CALL   395
06DA:  INCF   5C,F
06DB:  GOTO   6C5
....................     } 
....................      
....................     MFRC522_Wr( COMMANDREG, PCD_CALCCRC ); 
06DC:  MOVLW  01
06DD:  MOVWF  6D
06DE:  MOVLW  03
06DF:  MOVWF  6E
06E0:  CALL   395
....................          
....................     i = 0xFF; 
06E1:  MOVLW  FF
06E2:  MOVWF  5C
....................    
....................     do  
....................     { 
....................         n = MFRC522_Rd( DIVIRQREG ); 
06E3:  MOVLW  05
06E4:  MOVWF  6C
06E5:  CALL   3E2
06E6:  MOVF   78,W
06E7:  MOVWF  5D
....................         i--; 
06E8:  DECF   5C,F
....................     } 
....................     while( i && !(n & 0x04) );        //CRCIrq = 1 
06E9:  MOVF   5C,F
06EA:  BTFSC  03.2
06EB:  GOTO   6EE
06EC:  BTFSS  5D.2
06ED:  GOTO   6E3
....................          
....................     dataOut[0] = MFRC522_Rd( CRCRESULTREGL ); 
06EE:  MOVF   5A,W
06EF:  MOVWF  78
06F0:  MOVF   5B,W
06F1:  MOVWF  7A
06F2:  MOVF   5A,W
06F3:  MOVWF  5E
06F4:  MOVF   5B,W
06F5:  MOVWF  5F
06F6:  MOVLW  22
06F7:  MOVWF  6C
06F8:  CALL   3E2
06F9:  MOVF   5E,W
06FA:  MOVWF  04
06FB:  BCF    03.7
06FC:  BTFSC  5F.0
06FD:  BSF    03.7
06FE:  MOVF   78,W
06FF:  MOVWF  00
....................     dataOut[1] = MFRC522_Rd( CRCRESULTREGM );         
0700:  MOVLW  01
0701:  ADDWF  5A,W
0702:  MOVWF  78
0703:  MOVF   5B,W
0704:  MOVWF  7A
0705:  BTFSC  03.0
0706:  INCF   7A,F
0707:  MOVF   78,W
0708:  MOVWF  5E
0709:  MOVF   7A,W
070A:  MOVWF  5F
070B:  MOVLW  21
070C:  MOVWF  6C
070D:  CALL   3E2
070E:  MOVF   5E,W
070F:  MOVWF  04
0710:  BCF    03.7
0711:  BTFSC  5F.0
0712:  BSF    03.7
0713:  MOVF   78,W
0714:  MOVWF  00
.................... } 
.................... char MFRC522_SelectTag( char *serNum ) 
.................... { 
....................   char i; 
....................   char _status; 
....................   char size; 
....................   unsigned recvBits; 
....................   char buffer[9]; 
....................    
....................    
....................    
....................   buffer[0] = PICC_SElECTTAG; 
....................   buffer[1] = 0x70; 
....................    
....................   for ( i=2; i < 7; i++ ) 
....................   { 
....................     buffer[i] = *serNum++; 
....................   } 
....................    
....................   MFRC522_CRC( buffer, 7, &buffer[7] );              
....................    
....................   _status = MFRC522_ToCard( PCD_TRANSCEIVE, buffer, 9, buffer, &recvBits ); 
....................   if ( (_status == MI_OK) && (recvBits == 0x18) ) 
....................   { 
....................     size = buffer[0]; 
....................   } 
....................   else 
....................   { 
....................     size = 0; 
....................   } 
....................   return size; 
.................... } 
.................... //hibernation 
.................... void MFRC522_Halt() 
.................... { 
....................   unsigned unLen; 
....................   char buff[4]; 
....................    
....................   buff[0] = PICC_HALT; 
*
06AF:  MOVLW  50
06B0:  MOVWF  53
....................   buff[1] = 0; 
06B1:  CLRF   54
....................   MFRC522_CRC( buff, 2, &buff[2] ); 
06B2:  CLRF   58
06B3:  MOVLW  53
06B4:  MOVWF  57
06B5:  MOVLW  02
06B6:  MOVWF  59
06B7:  CLRF   5B
06B8:  MOVLW  55
06B9:  MOVWF  5A
....................   MFRC522_Clear_Bit( STATUS2REG, 0x80 ); 
*
0715:  MOVLW  08
0716:  MOVWF  69
0717:  MOVLW  80
0718:  MOVWF  6A
0719:  CALL   42F
....................   MFRC522_ToCard( PCD_TRANSCEIVE, buff, 4, buff, &unLen ); 
071A:  MOVLW  0C
071B:  MOVWF  5B
071C:  CLRF   5D
071D:  MOVLW  53
071E:  MOVWF  5C
071F:  MOVLW  04
0720:  MOVWF  5E
0721:  CLRF   60
0722:  MOVLW  53
0723:  MOVWF  5F
0724:  CLRF   62
0725:  MOVLW  52
0726:  MOVWF  61
0727:  CALL   498
....................   MFRC522_Clear_Bit( STATUS2REG, 0x08 ); 
0728:  MOVLW  08
0729:  MOVWF  69
072A:  MOVWF  6A
072B:  CALL   42F
.................... } 
....................  
.................... char MFRC522_AntiColl( char *serNum ) 
*
05FA:  CLRF   59
.................... { 
....................   char _status; 
....................   char i; 
....................   char serNumCheck = 0; 
....................   unsigned unLen; 
....................   MFRC522_Wr( BITFRAMINGREG, 0x00 );                //TxLastBists = BitFramingReg[2..0] 
05FB:  MOVLW  0D
05FC:  MOVWF  6D
05FD:  CLRF   6E
05FE:  CALL   395
....................   serNum[0] = PICC_ANTICOLL; 
05FF:  MOVF   55,W
0600:  MOVWF  04
0601:  BCF    03.7
0602:  BTFSC  56.0
0603:  BSF    03.7
0604:  MOVLW  93
0605:  MOVWF  00
....................   serNum[1] = 0x20; 
0606:  MOVLW  01
0607:  ADDWF  55,W
0608:  MOVWF  04
0609:  BCF    03.7
060A:  BTFSC  56.0
060B:  BSF    03.7
060C:  MOVLW  20
060D:  MOVWF  00
....................   MFRC522_Clear_Bit( STATUS2REG, 0x08 ); 
060E:  MOVLW  08
060F:  MOVWF  69
0610:  MOVWF  6A
0611:  CALL   42F
....................   _status = MFRC522_ToCard( PCD_TRANSCEIVE, serNum, 2, serNum, &unLen ); 
0612:  MOVLW  0C
0613:  MOVWF  5B
0614:  MOVF   56,W
0615:  MOVWF  5D
0616:  MOVF   55,W
0617:  MOVWF  5C
0618:  MOVLW  02
0619:  MOVWF  5E
061A:  MOVF   56,W
061B:  MOVWF  60
061C:  MOVF   55,W
061D:  MOVWF  5F
061E:  CLRF   62
061F:  MOVLW  5A
0620:  MOVWF  61
0621:  CALL   498
0622:  MOVF   78,W
0623:  MOVWF  57
....................   if (_status == MI_OK) 
0624:  MOVF   57,F
0625:  BTFSS  03.2
0626:  GOTO   642
....................   { 
....................     for ( i=0; i < 4; i++ ) 
0627:  CLRF   58
0628:  MOVF   58,W
0629:  SUBLW  03
062A:  BTFSS  03.0
062B:  GOTO   636
....................     { 
....................       serNumCheck ^= serNum[i]; 
062C:  MOVF   58,W
062D:  ADDWF  55,W
062E:  MOVWF  04
062F:  BCF    03.7
0630:  BTFSC  56.0
0631:  BSF    03.7
0632:  MOVF   00,W
0633:  XORWF  59,F
0634:  INCF   58,F
0635:  GOTO   628
....................     } 
....................      
....................     if ( serNumCheck != serNum[4] ) 
0636:  MOVLW  04
0637:  ADDWF  55,W
0638:  MOVWF  04
0639:  BCF    03.7
063A:  BTFSC  56.0
063B:  BSF    03.7
063C:  MOVF   00,W
063D:  SUBWF  59,W
063E:  BTFSC  03.2
063F:  GOTO   642
....................     { 
....................       _status = MI_ERR; 
0640:  MOVLW  02
0641:  MOVWF  57
....................     } 
....................   } 
....................   return _status; 
0642:  MOVF   57,W
0643:  MOVWF  78
.................... } 
....................  
.................... char MFRC522_isCard( char *TagType )  
.................... { 
....................     if (MFRC522_Request( PICC_REQIDL, TagType ) == MI_OK) 
*
05B8:  MOVLW  26
05B9:  MOVWF  54
05BA:  MOVF   53,W
05BB:  MOVWF  56
05BC:  MOVF   52,W
05BD:  MOVWF  55
*
05E7:  MOVF   78,F
05E8:  BTFSS  03.2
05E9:  GOTO   5EE
....................         return 1; 
05EA:  MOVLW  01
05EB:  MOVWF  78
05EC:  GOTO   5F0
05ED:  GOTO   5F0
....................     else 
....................         return 0;  
05EE:  MOVLW  00
05EF:  MOVWF  78
.................... } 
.................... char MFRC522_ReadCardSerial( char *str ) 
.................... { 
.................... char _status;  
....................  _status = MFRC522_AntiColl( str ); 
*
05F6:  MOVF   53,W
05F7:  MOVWF  56
05F8:  MOVF   52,W
05F9:  MOVWF  55
*
0644:  MOVF   78,W
0645:  MOVWF  54
....................  str[5] = 0; 
0646:  MOVLW  05
0647:  ADDWF  52,W
0648:  MOVWF  04
0649:  BCF    03.7
064A:  BTFSC  53.0
064B:  BSF    03.7
064C:  CLRF   00
....................  if (_status == MI_OK) 
064D:  MOVF   54,F
064E:  BTFSS  03.2
064F:  GOTO   654
....................   return 1; 
0650:  MOVLW  01
0651:  MOVWF  78
0652:  GOTO   656
0653:  GOTO   656
....................  else 
....................   return 0; 
0654:  MOVLW  00
0655:  MOVWF  78
.................... } 
....................  
....................  
.................... //!char Tarjeta1[4] = {0xA6, 0x19, 0x01, 0x2B}; 
.................... //!char Tarjeta2[4] = {0x6D, 0xFE, 0xAA, 0x59}; 
.................... char llavero1[4] = {0x69, 0x48, 0xC8, 0x73}; 
*
0747:  MOVLW  69
0748:  MOVWF  29
0749:  MOVLW  48
074A:  MOVWF  2A
074B:  MOVLW  C8
074C:  MOVWF  2B
074D:  MOVLW  73
074E:  MOVWF  2C
.................... //! 
.................... char UID[4], i; 
.................... unsigned int TagType; 
.................... MFRC522_Init(); 
....................  
.................... int1 C_uid = false, onehit = 0; 
....................  
.................... //Chronos mitho dios del tiempo. 
.................... int16 tiempo_alarma = 0; 
.................... int8 cont = 0, segundos = 0; 
.................... int8 c1 = 0,  c2 = 0,  c3 = 0; 
....................  
.................... //Variables - Sistema de seguridad 
.................... char clave[5]; 
.................... char edu[5]; 
.................... char pass6[5]; 
.................... char pass[5]; 
.................... char control; 
.................... int8 num_faults = 0; 
.................... int8 SecurityLVL = 0; 
....................  
.................... /*TENER EN CUENTA 
....................  
.................... BLUETOOTH   RB3 
.................... ALARMA      RA1 
.................... START       RA7 
.................... ON/OFF      RA0 
....................  
.................... */ 
....................  
.................... int1 get_UID(char Data[], char UID[]) 
.................... { 
....................    for (int i = 0; i < 4; i++) 
*
065F:  CLRF   56
0660:  MOVF   56,W
0661:  SUBLW  03
0662:  BTFSS  03.0
0663:  GOTO   67C
....................    { 
....................       if (UID[i] == Data[i]) 
0664:  MOVF   56,W
0665:  ADDWF  54,W
0666:  MOVWF  04
0667:  BCF    03.7
0668:  BTFSC  55.0
0669:  BSF    03.7
066A:  MOVF   00,W
066B:  MOVWF  57
066C:  MOVF   56,W
066D:  ADDWF  52,W
066E:  MOVWF  04
066F:  BCF    03.7
0670:  BTFSC  53.0
0671:  BSF    03.7
0672:  MOVF   00,W
0673:  SUBWF  57,W
0674:  BTFSS  03.2
0675:  GOTO   678
....................       { 
....................          C_uid = true; 
0676:  BSF    33.0
....................       } 
0677:  GOTO   67A
....................       else 
....................       { 
....................          C_uid = false; 
0678:  BCF    33.0
....................          break; 
0679:  GOTO   67C
....................       } 
067A:  INCF   56,F
067B:  GOTO   660
....................    } 
....................    return C_uid; 
067C:  MOVLW  00
067D:  BTFSC  33.0
067E:  MOVLW  01
067F:  MOVWF  78
.................... } 
....................  
.................... #int_EXT // Interrupcion btn panico 
.................... Void PanicRoom() 
.................... { 
....................    //Se apaga motocicleta, se enciende bluetooth, se graba lvl seguridad. 
....................    delay_ms(5000); 
*
0050:  MOVLW  14
0051:  MOVWF  7B
0052:  MOVLW  FA
0053:  BSF    03.5
0054:  MOVWF  25
0055:  BCF    03.5
0056:  CALL   03B
0057:  DECFSZ 7B,F
0058:  GOTO   052
....................    output_LOW(PIN_A0); 
0059:  BSF    03.5
005A:  BCF    05.0
005B:  BCF    03.5
005C:  BCF    05.0
....................    output_HIGH(PIN_B3); 
005D:  BSF    03.5
005E:  BCF    06.3
005F:  BCF    03.5
0060:  BSF    06.3
....................    output_low(PIN_A1); 
0061:  BSF    03.5
0062:  BCF    05.1
0063:  BCF    03.5
0064:  BCF    05.1
....................    securityLVL = 0; 
0065:  CLRF   51
....................    WRITE_EEPROM(3, securityLVL); 
0066:  MOVF   0B,W
0067:  MOVWF  77
0068:  BCF    0B.7
0069:  MOVLW  03
006A:  BSF    03.5
006B:  MOVWF  1B
006C:  BCF    03.5
006D:  MOVF   51,W
006E:  BSF    03.5
006F:  MOVWF  1A
0070:  BCF    1C.7
0071:  BSF    1C.2
0072:  MOVLW  55
0073:  MOVWF  1D
0074:  MOVLW  AA
0075:  MOVWF  1D
0076:  BSF    1C.1
0077:  BTFSC  1C.1
0078:  GOTO   077
0079:  BCF    1C.2
007A:  MOVF   77,W
007B:  BCF    03.5
007C:  IORWF  0B,F
....................  
....................    char pass0[4] = {'1','9','9','6'}; 
007D:  MOVLW  31
007E:  MOVWF  72
007F:  MOVLW  39
0080:  MOVWF  73
0081:  MOVWF  74
0082:  MOVLW  36
0083:  MOVWF  75
....................    for(int8 v=30 ;v<34;v++){WRITE_EEPROM(v,pass0[v-30]);} 
0084:  MOVLW  1E
0085:  MOVWF  76
0086:  MOVF   76,W
0087:  SUBLW  21
0088:  BTFSS  03.0
0089:  GOTO   0A8
008A:  MOVLW  1E
008B:  SUBWF  76,W
008C:  ADDLW  72
008D:  MOVWF  04
008E:  BCF    03.7
008F:  MOVF   00,W
0090:  MOVWF  7B
0091:  MOVF   0B,W
0092:  MOVWF  77
0093:  BCF    0B.7
0094:  MOVF   76,W
0095:  BSF    03.5
0096:  MOVWF  1B
0097:  MOVF   7B,W
0098:  MOVWF  1A
0099:  BCF    1C.7
009A:  BSF    1C.2
009B:  MOVLW  55
009C:  MOVWF  1D
009D:  MOVLW  AA
009E:  MOVWF  1D
009F:  BSF    1C.1
00A0:  BTFSC  1C.1
00A1:  GOTO   0A0
00A2:  BCF    1C.2
00A3:  MOVF   77,W
00A4:  BCF    03.5
00A5:  IORWF  0B,F
00A6:  INCF   76,F
00A7:  GOTO   086
....................     
....................    onehit = 1; 
00A8:  BSF    33.1
....................    enable_interrupts(int_timer1); 
00A9:  BSF    03.5
00AA:  BSF    0C.0
.................... } 
00AB:  BCF    03.5
00AC:  BCF    0B.1
00AD:  BCF    0A.3
00AE:  GOTO   02A
.................... #int_TIMER1 
.................... void timer_1() 
.................... { 
....................    securityLVL = READ_EEPROM(3); 
00AF:  MOVLW  03
00B0:  BSF    03.5
00B1:  MOVWF  1B
00B2:  BCF    1C.7
00B3:  BSF    1C.0
00B4:  MOVF   1A,W
00B5:  BCF    03.5
00B6:  MOVWF  51
....................    cont++; 
00B7:  INCF   36,F
....................    if (cont == 2) 
00B8:  MOVF   36,W
00B9:  SUBLW  02
00BA:  BTFSS  03.2
00BB:  GOTO   0D4
....................    { 
....................       if (securityLVL == 0) 
00BC:  MOVF   51,F
00BD:  BTFSS  03.2
00BE:  GOTO   0C5
....................       { 
....................          output_toggle(PIN_A1); 
00BF:  BSF    03.5
00C0:  BCF    05.1
00C1:  MOVLW  02
00C2:  BCF    03.5
00C3:  XORWF  05,F
....................       }else if(securityLVL == 1){ 
00C4:  GOTO   0D2
00C5:  DECFSZ 51,W
00C6:  GOTO   0D2
....................          if (segundos >= 120) 
00C7:  MOVF   37,W
00C8:  SUBLW  77
00C9:  BTFSC  03.0
00CA:  GOTO   0D2
....................          { 
....................             output_low(PIN_B3); 
00CB:  BSF    03.5
00CC:  BCF    06.3
00CD:  BCF    03.5
00CE:  BCF    06.3
....................             disable_interrupts(int_timer1); 
00CF:  BSF    03.5
00D0:  BCF    0C.0
00D1:  BCF    03.5
....................          } 
....................           
....................       } 
....................       segundos++; 
00D2:  INCF   37,F
....................       cont = 0; 
00D3:  CLRF   36
....................    } 
....................    set_timer1(3036); 
00D4:  CLRF   0E
00D5:  MOVLW  0B
00D6:  MOVWF  0F
00D7:  MOVLW  DC
00D8:  MOVWF  0E
00D9:  BCF    0C.0
00DA:  BCF    0A.3
00DB:  GOTO   02A
.................... } 
....................  
....................     
....................  
.................... void tiempoala() 
.................... { 
....................    gets(clave); 
*
0330:  MOVLW  3B
0331:  MOVWF  04
0332:  BCF    03.7
0333:  DECF   04,F
0334:  INCF   04,F
0335:  BTFSS  0C.5
0336:  GOTO   335
0337:  MOVF   1A,W
0338:  MOVWF  00
0339:  MOVLW  0D
033A:  SUBWF  00,W
033B:  BTFSS  03.2
033C:  GOTO   334
033D:  CLRF   00
....................    strcpy(edu, clave); 
033E:  CLRF   75
033F:  MOVLW  3B
0340:  MOVWF  74
0341:  CLRF   73
0342:  MOVLW  40
0343:  MOVWF  72
0344:  MOVF   74,W
0345:  MOVWF  04
0346:  BCF    03.7
0347:  BTFSC  75.0
0348:  BSF    03.7
0349:  MOVF   00,W
034A:  MOVWF  76
034B:  MOVF   72,W
034C:  MOVWF  04
034D:  BCF    03.7
034E:  BTFSC  73.0
034F:  BSF    03.7
0350:  MOVF   76,W
0351:  MOVWF  00
0352:  MOVF   00,F
0353:  BTFSC  03.2
0354:  GOTO   358
0355:  INCF   72,F
0356:  INCF   74,F
0357:  GOTO   344
....................    onehit = 1;   
0358:  BSF    33.1
....................  
....................    c3 = edu[0]-'0'; 
0359:  MOVLW  30
035A:  SUBWF  40,W
035B:  MOVWF  3A
....................    c2 = edu[1]-'0'; 
035C:  MOVLW  30
035D:  SUBWF  41,W
035E:  MOVWF  39
....................    c1 = edu[2]-'0'; 
035F:  MOVLW  30
0360:  SUBWF  42,W
0361:  MOVWF  38
....................  
....................    tiempo_alarma = c1 + (c2*10) + (c3*100); 
0362:  MOVF   39,W
0363:  BSF    03.5
0364:  MOVWF  20
0365:  MOVLW  0A
0366:  MOVWF  21
0367:  BCF    03.5
0368:  CALL   105
0369:  MOVF   78,W
036A:  ADDWF  38,W
036B:  MOVWF  72
036C:  MOVF   3A,W
036D:  BSF    03.5
036E:  MOVWF  20
036F:  MOVLW  64
0370:  MOVWF  21
0371:  BCF    03.5
0372:  CALL   105
0373:  MOVF   78,W
0374:  ADDWF  72,W
0375:  MOVWF  34
0376:  CLRF   35
....................    WRITE_EEPROM(40, tiempo_alarma); 
0377:  MOVF   0B,W
0378:  MOVWF  77
0379:  BCF    0B.7
037A:  MOVLW  28
037B:  BSF    03.5
037C:  MOVWF  1B
037D:  BCF    03.5
037E:  MOVF   34,W
037F:  BSF    03.5
0380:  MOVWF  1A
0381:  BCF    1C.7
0382:  BSF    1C.2
0383:  MOVLW  55
0384:  MOVWF  1D
0385:  MOVLW  AA
0386:  MOVWF  1D
0387:  BSF    1C.1
0388:  BTFSC  1C.1
0389:  GOTO   388
038A:  BCF    1C.2
038B:  MOVF   77,W
038C:  BCF    03.5
038D:  IORWF  0B,F
.................... //!   printf("%lu",tiempo_alarma); 
.................... } 
....................  
.................... void backdoor() 
.................... { 
....................    gets(clave); 
*
02B9:  MOVLW  3B
02BA:  MOVWF  04
02BB:  BCF    03.7
02BC:  DECF   04,F
02BD:  INCF   04,F
02BE:  BTFSS  0C.5
02BF:  GOTO   2BE
02C0:  MOVF   1A,W
02C1:  MOVWF  00
02C2:  MOVLW  0D
02C3:  SUBWF  00,W
02C4:  BTFSS  03.2
02C5:  GOTO   2BD
02C6:  CLRF   00
....................    strcpy(edu, clave); 
02C7:  BSF    03.5
02C8:  CLRF   23
02C9:  MOVLW  3B
02CA:  MOVWF  22
02CB:  CLRF   21
02CC:  MOVLW  40
02CD:  MOVWF  20
02CE:  MOVF   22,W
02CF:  MOVWF  04
02D0:  BCF    03.7
02D1:  BTFSC  23.0
02D2:  BSF    03.7
02D3:  MOVF   00,W
02D4:  MOVWF  24
02D5:  MOVF   20,W
02D6:  MOVWF  04
02D7:  BCF    03.7
02D8:  BTFSC  21.0
02D9:  BSF    03.7
02DA:  MOVF   24,W
02DB:  MOVWF  00
02DC:  MOVF   00,F
02DD:  BTFSC  03.2
02DE:  GOTO   2E2
02DF:  INCF   20,F
02E0:  INCF   22,F
02E1:  GOTO   2CE
....................    onehit = 1; 
02E2:  BCF    03.5
02E3:  BSF    33.1
....................  
....................    for(int8 v=30;v<34;v++){pass6[v-30] = READ_EEPROM(v);}    
02E4:  MOVLW  1E
02E5:  MOVWF  7E
02E6:  MOVF   7E,W
02E7:  SUBLW  21
02E8:  BTFSS  03.0
02E9:  GOTO   2F9
02EA:  MOVLW  1E
02EB:  SUBWF  7E,W
02EC:  ADDLW  45
02ED:  MOVWF  04
02EE:  BCF    03.7
02EF:  MOVF   7E,W
02F0:  BSF    03.5
02F1:  MOVWF  1B
02F2:  BCF    1C.7
02F3:  BSF    1C.0
02F4:  MOVF   1A,W
02F5:  MOVWF  00
02F6:  INCF   7E,F
02F7:  BCF    03.5
02F8:  GOTO   2E6
....................    if (edu[0] == pass6[0] && edu[1] == pass6[1] && edu[2] == pass6[2] && edu[3] == pass6[3]) 
02F9:  MOVF   45,W
02FA:  SUBWF  40,W
02FB:  BTFSS  03.2
02FC:  GOTO   326
02FD:  MOVF   46,W
02FE:  SUBWF  41,W
02FF:  BTFSS  03.2
0300:  GOTO   326
0301:  MOVF   47,W
0302:  SUBWF  42,W
0303:  BTFSS  03.2
0304:  GOTO   326
0305:  MOVF   48,W
0306:  SUBWF  43,W
0307:  BTFSS  03.2
0308:  GOTO   326
....................    { 
....................       num_faults = 0; 
0309:  CLRF   50
....................       securityLVL = 1; 
030A:  MOVLW  01
030B:  MOVWF  51
....................       WRITE_EEPROM(3, securityLVL); 
030C:  MOVF   0B,W
030D:  MOVWF  77
030E:  BCF    0B.7
030F:  MOVLW  03
0310:  BSF    03.5
0311:  MOVWF  1B
0312:  BCF    03.5
0313:  MOVF   51,W
0314:  BSF    03.5
0315:  MOVWF  1A
0316:  BCF    1C.7
0317:  BSF    1C.2
0318:  MOVLW  55
0319:  MOVWF  1D
031A:  MOVLW  AA
031B:  MOVWF  1D
031C:  BSF    1C.1
031D:  BTFSC  1C.1
031E:  GOTO   31D
031F:  BCF    1C.2
0320:  MOVF   77,W
0321:  BCF    03.5
0322:  IORWF  0B,F
....................       disable_interrupts(int_timer1); 
0323:  BSF    03.5
0324:  BCF    0C.0
0325:  BCF    03.5
....................    } 
.................... } 
....................  
.................... void start() 
.................... { 
....................    output_HIGH(PIN_A7); 
*
00DC:  BSF    03.5
00DD:  BCF    05.7
00DE:  BCF    03.5
00DF:  BSF    05.7
....................    delay_ms(1000); 
00E0:  MOVLW  04
00E1:  BSF    03.5
00E2:  MOVWF  20
00E3:  MOVLW  FA
00E4:  MOVWF  25
00E5:  BCF    03.5
00E6:  CALL   03B
00E7:  BSF    03.5
00E8:  DECFSZ 20,F
00E9:  GOTO   0E3
....................    output_low(PIN_A7); 
00EA:  BCF    05.7
00EB:  BCF    03.5
00EC:  BCF    05.7
00ED:  RETURN
.................... } 
....................  
.................... void PassChange() 
.................... { 
....................    disable_interrupts(int_timer1); 
*
0136:  BSF    03.5
0137:  BCF    0C.0
....................    gets(clave); 
0138:  MOVLW  3B
0139:  MOVWF  04
013A:  BCF    03.7
013B:  DECF   04,F
013C:  INCF   04,F
013D:  BCF    03.5
013E:  BTFSS  0C.5
013F:  GOTO   13E
0140:  MOVF   1A,W
0141:  MOVWF  00
0142:  MOVLW  0D
0143:  SUBWF  00,W
0144:  BTFSC  03.2
0145:  GOTO   148
0146:  BSF    03.5
0147:  GOTO   13C
0148:  CLRF   00
....................    strcpy(edu, clave); 
0149:  BSF    03.5
014A:  CLRF   23
014B:  MOVLW  3B
014C:  MOVWF  22
014D:  CLRF   21
014E:  MOVLW  40
014F:  MOVWF  20
0150:  MOVF   22,W
0151:  MOVWF  04
0152:  BCF    03.7
0153:  BTFSC  23.0
0154:  BSF    03.7
0155:  MOVF   00,W
0156:  MOVWF  24
0157:  MOVF   20,W
0158:  MOVWF  04
0159:  BCF    03.7
015A:  BTFSC  21.0
015B:  BSF    03.7
015C:  MOVF   24,W
015D:  MOVWF  00
015E:  MOVF   00,F
015F:  BTFSC  03.2
0160:  GOTO   164
0161:  INCF   20,F
0162:  INCF   22,F
0163:  GOTO   150
....................    onehit = 1; 
0164:  BCF    03.5
0165:  BSF    33.1
....................  
....................    for(int8 v=10;v<14;v++){ WRITE_EEPROM(v, edu[v-10]);} 
0166:  MOVLW  0A
0167:  MOVWF  72
0168:  MOVF   72,W
0169:  SUBLW  0D
016A:  BTFSS  03.0
016B:  GOTO   18C
016C:  MOVLW  0A
016D:  SUBWF  72,W
016E:  ADDLW  40
016F:  MOVWF  04
0170:  BCF    03.7
0171:  MOVF   00,W
0172:  BSF    03.5
0173:  MOVWF  20
0174:  BCF    03.5
0175:  MOVF   0B,W
0176:  MOVWF  77
0177:  BCF    0B.7
0178:  MOVF   72,W
0179:  BSF    03.5
017A:  MOVWF  1B
017B:  MOVF   20,W
017C:  MOVWF  1A
017D:  BCF    1C.7
017E:  BSF    1C.2
017F:  MOVLW  55
0180:  MOVWF  1D
0181:  MOVLW  AA
0182:  MOVWF  1D
0183:  BSF    1C.1
0184:  BTFSC  1C.1
0185:  GOTO   184
0186:  BCF    1C.2
0187:  MOVF   77,W
0188:  BCF    03.5
0189:  IORWF  0B,F
018A:  INCF   72,F
018B:  GOTO   168
....................    printf("%s", edu); 
018C:  MOVLW  40
018D:  MOVWF  04
018E:  BCF    03.7
018F:  MOVLW  00
0190:  IORWF  00,W
0191:  BTFSC  03.2
0192:  GOTO   199
0193:  MOVF   00,W
0194:  BTFSS  0C.4
0195:  GOTO   194
0196:  MOVWF  19
0197:  INCF   04,F
0198:  GOTO   18F
.................... } 
....................  
.................... void PassVerify() 
.................... { 
....................    disable_interrupts(int_timer1); 
*
01A1:  BSF    03.5
01A2:  BCF    0C.0
....................    gets(clave); 
01A3:  MOVLW  3B
01A4:  MOVWF  04
01A5:  BCF    03.7
01A6:  DECF   04,F
01A7:  INCF   04,F
01A8:  BCF    03.5
01A9:  BTFSS  0C.5
01AA:  GOTO   1A9
01AB:  MOVF   1A,W
01AC:  MOVWF  00
01AD:  MOVLW  0D
01AE:  SUBWF  00,W
01AF:  BTFSC  03.2
01B0:  GOTO   1B3
01B1:  BSF    03.5
01B2:  GOTO   1A7
01B3:  CLRF   00
....................    strcpy(edu, clave); 
01B4:  BSF    03.5
01B5:  CLRF   23
01B6:  MOVLW  3B
01B7:  MOVWF  22
01B8:  CLRF   21
01B9:  MOVLW  40
01BA:  MOVWF  20
01BB:  MOVF   22,W
01BC:  MOVWF  04
01BD:  BCF    03.7
01BE:  BTFSC  23.0
01BF:  BSF    03.7
01C0:  MOVF   00,W
01C1:  MOVWF  24
01C2:  MOVF   20,W
01C3:  MOVWF  04
01C4:  BCF    03.7
01C5:  BTFSC  21.0
01C6:  BSF    03.7
01C7:  MOVF   24,W
01C8:  MOVWF  00
01C9:  MOVF   00,F
01CA:  BTFSC  03.2
01CB:  GOTO   1CF
01CC:  INCF   20,F
01CD:  INCF   22,F
01CE:  GOTO   1BB
....................    onehit = 1; 
01CF:  BCF    03.5
01D0:  BSF    33.1
....................  
....................    for(int8 v=10;v<14;v++){pass[v-10] = READ_EEPROM(v);}   
01D1:  MOVLW  0A
01D2:  MOVWF  7E
01D3:  MOVF   7E,W
01D4:  SUBLW  0D
01D5:  BTFSS  03.0
01D6:  GOTO   1E6
01D7:  MOVLW  0A
01D8:  SUBWF  7E,W
01D9:  ADDLW  4A
01DA:  MOVWF  04
01DB:  BCF    03.7
01DC:  MOVF   7E,W
01DD:  BSF    03.5
01DE:  MOVWF  1B
01DF:  BCF    1C.7
01E0:  BSF    1C.0
01E1:  MOVF   1A,W
01E2:  MOVWF  00
01E3:  INCF   7E,F
01E4:  BCF    03.5
01E5:  GOTO   1D3
....................    if (edu[0] == pass[0] && edu[1] == pass[1] && edu[2] == pass[2] && edu[3] == pass[3])     
01E6:  MOVF   4A,W
01E7:  SUBWF  40,W
01E8:  BTFSS  03.2
01E9:  GOTO   21E
01EA:  MOVF   4B,W
01EB:  SUBWF  41,W
01EC:  BTFSS  03.2
01ED:  GOTO   21E
01EE:  MOVF   4C,W
01EF:  SUBWF  42,W
01F0:  BTFSS  03.2
01F1:  GOTO   21E
01F2:  MOVF   4D,W
01F3:  SUBWF  43,W
01F4:  BTFSS  03.2
01F5:  GOTO   21E
....................    { 
....................       output_high(PIN_A0); 
01F6:  BSF    03.5
01F7:  BCF    05.0
01F8:  BCF    03.5
01F9:  BSF    05.0
....................       output_LOW(PIN_A1); 
01FA:  BSF    03.5
01FB:  BCF    05.1
01FC:  BCF    03.5
01FD:  BCF    05.1
....................       output_LOW(PIN_B3); 
01FE:  BSF    03.5
01FF:  BCF    06.3
0200:  BCF    03.5
0201:  BCF    06.3
....................       securityLVL = 1; 
0202:  MOVLW  01
0203:  MOVWF  51
....................       WRITE_EEPROM(3, securityLVL); 
0204:  MOVF   0B,W
0205:  MOVWF  77
0206:  BCF    0B.7
0207:  MOVLW  03
0208:  BSF    03.5
0209:  MOVWF  1B
020A:  BCF    03.5
020B:  MOVF   51,W
020C:  BSF    03.5
020D:  MOVWF  1A
020E:  BCF    1C.7
020F:  BSF    1C.2
0210:  MOVLW  55
0211:  MOVWF  1D
0212:  MOVLW  AA
0213:  MOVWF  1D
0214:  BSF    1C.1
0215:  BTFSC  1C.1
0216:  GOTO   215
0217:  BCF    1C.2
0218:  MOVF   77,W
0219:  BCF    03.5
021A:  IORWF  0B,F
....................       start(); 
021B:  CALL   0DC
....................       num_faults = 0; 
021C:  CLRF   50
....................    } 
021D:  GOTO   2AA
....................    else 
....................    { 
....................       output_low(PIN_A0); 
021E:  BSF    03.5
021F:  BCF    05.0
0220:  BCF    03.5
0221:  BCF    05.0
....................       output_HIGH(PIN_B3); 
0222:  BSF    03.5
0223:  BCF    06.3
0224:  BCF    03.5
0225:  BSF    06.3
....................       securityLVL = 0; 
0226:  CLRF   51
....................       WRITE_EEPROM(3, securityLVL); 
0227:  MOVF   0B,W
0228:  MOVWF  77
0229:  BCF    0B.7
022A:  MOVLW  03
022B:  BSF    03.5
022C:  MOVWF  1B
022D:  BCF    03.5
022E:  MOVF   51,W
022F:  BSF    03.5
0230:  MOVWF  1A
0231:  BCF    1C.7
0232:  BSF    1C.2
0233:  MOVLW  55
0234:  MOVWF  1D
0235:  MOVLW  AA
0236:  MOVWF  1D
0237:  BSF    1C.1
0238:  BTFSC  1C.1
0239:  GOTO   238
023A:  BCF    1C.2
023B:  MOVF   77,W
023C:  BCF    03.5
023D:  IORWF  0B,F
....................       num_faults = num_faults + 1; 
023E:  MOVLW  01
023F:  ADDWF  50,F
....................       printf("%d", num_faults);   
0240:  MOVF   50,W
0241:  BSF    03.5
0242:  MOVWF  20
0243:  MOVLW  18
0244:  MOVWF  21
....................    } 
....................  
....................    enable_interrupts(int_timer1); 
*
02AA:  BSF    03.5
02AB:  BSF    0C.0
....................  
....................        
....................     
.................... } 
....................  
.................... #INT_RDA // Interrupcion por serial. para recibir datos del movil 
.................... void serial_isr() 
.................... {   
....................       control = getc(); 
*
012C:  BTFSS  0C.5
012D:  GOTO   12C
012E:  MOVF   1A,W
012F:  MOVWF  4F
....................       if (control == 'h' && securityLVL == 1 ){PassChange();} 
0130:  MOVF   4F,W
0131:  SUBLW  68
0132:  BTFSS  03.2
0133:  GOTO   199
0134:  DECFSZ 51,W
0135:  GOTO   199
....................       if (control == 'X' && num_faults < 9 )  {PassVerify();printf("#");} 
*
0199:  MOVF   4F,W
019A:  SUBLW  58
019B:  BTFSS  03.2
019C:  GOTO   2B1
019D:  MOVF   50,W
019E:  SUBLW  08
019F:  BTFSS  03.0
01A0:  GOTO   2B1
*
02AC:  MOVLW  23
02AD:  BCF    03.5
02AE:  BTFSS  0C.4
02AF:  GOTO   2AE
02B0:  MOVWF  19
....................       if (control == 'X' && num_faults >= 9 ) {backdoor();printf("@");} 
02B1:  MOVF   4F,W
02B2:  SUBLW  58
02B3:  BTFSS  03.2
02B4:  GOTO   32A
02B5:  MOVF   50,W
02B6:  SUBLW  08
02B7:  BTFSC  03.0
02B8:  GOTO   32A
*
0326:  MOVLW  40
0327:  BTFSS  0C.4
0328:  GOTO   327
0329:  MOVWF  19
....................       if (control == 't' && securityLVL == 1) {tiempoala();printf("t");} 
032A:  MOVF   4F,W
032B:  SUBLW  74
032C:  BTFSS  03.2
032D:  GOTO   392
032E:  DECFSZ 51,W
032F:  GOTO   392
*
038E:  MOVLW  74
038F:  BTFSS  0C.4
0390:  GOTO   38F
0391:  MOVWF  19
....................     
0392:  BCF    0C.5
0393:  BCF    0A.3
0394:  GOTO   02A
.................... } 
....................  
.................... //Detecccion de tarjecta inicio 
.................... void deteccion() 
.................... { 
....................    enable_interrupts(global); 
*
0572:  MOVLW  C0
0573:  IORWF  0B,F
....................    enable_interrupts(int_timer1); 
0574:  BSF    03.5
0575:  BSF    0C.0
....................  
....................    tiempo_alarma = READ_EEPROM(40); 
0576:  MOVLW  28
0577:  MOVWF  1B
0578:  BCF    1C.7
0579:  BSF    1C.0
057A:  MOVF   1A,W
057B:  BCF    03.5
057C:  CLRF   35
057D:  MOVWF  34
....................    securityLVL = READ_EEPROM(3); 
057E:  MOVLW  03
057F:  BSF    03.5
0580:  MOVWF  1B
0581:  BCF    1C.7
0582:  BSF    1C.0
0583:  MOVF   1A,W
0584:  BCF    03.5
0585:  MOVWF  51
....................  
....................    if (securityLVL == 1 && segundos == tiempo_alarma) 
0586:  DECFSZ 51,W
0587:  GOTO   5B3
0588:  MOVF   34,W
0589:  SUBWF  37,W
058A:  BTFSS  03.2
058B:  GOTO   5B3
058C:  MOVF   35,F
058D:  BTFSS  03.2
058E:  GOTO   5B3
....................    { 
....................       securityLVL = 0; 
058F:  CLRF   51
....................       WRITE_EEPROM(3, securityLVL); 
0590:  MOVF   0B,W
0591:  MOVWF  77
0592:  BCF    0B.7
0593:  MOVLW  03
0594:  BSF    03.5
0595:  MOVWF  1B
0596:  BCF    03.5
0597:  MOVF   51,W
0598:  BSF    03.5
0599:  MOVWF  1A
059A:  BCF    1C.7
059B:  BSF    1C.2
059C:  MOVLW  55
059D:  MOVWF  1D
059E:  MOVLW  AA
059F:  MOVWF  1D
05A0:  BSF    1C.1
05A1:  BTFSC  1C.1
05A2:  GOTO   5A1
05A3:  BCF    1C.2
05A4:  MOVF   77,W
05A5:  BCF    03.5
05A6:  IORWF  0B,F
....................       output_LOW(PIN_A0); 
05A7:  BSF    03.5
05A8:  BCF    05.0
05A9:  BCF    03.5
05AA:  BCF    05.0
....................       output_HIGH(PIN_B3); 
05AB:  BSF    03.5
05AC:  BCF    06.3
05AD:  BCF    03.5
05AE:  BSF    06.3
....................       onehit = 1; 
05AF:  BSF    33.1
....................       enable_interrupts(int_timer1); 
05B0:  BSF    03.5
05B1:  BSF    0C.0
05B2:  BCF    03.5
....................    } 
....................  
....................    //!&&  READ_EEPROM(5) == 10 
....................    if (securityLVL == 1 && MFRC522_isCard(&TagType)) 
05B3:  DECFSZ 51,W
05B4:  GOTO   72C
05B5:  CLRF   53
05B6:  MOVLW  32
05B7:  MOVWF  52
*
05F0:  MOVF   78,F
05F1:  BTFSC  03.2
05F2:  GOTO   72C
....................    { 
....................       if (MFRC522_ReadCardSerial(&UID)) 
05F3:  CLRF   53
05F4:  MOVLW  2D
05F5:  MOVWF  52
*
0656:  MOVF   78,F
0657:  BTFSC  03.2
0658:  GOTO   6AF
....................       { 
....................          if (get_UID(llavero1, UID)) 
0659:  CLRF   53
065A:  MOVLW  29
065B:  MOVWF  52
065C:  CLRF   55
065D:  MOVLW  2D
065E:  MOVWF  54
*
0680:  MOVF   78,F
0681:  BTFSC  03.2
0682:  GOTO   6AF
....................          { 
....................             output_high(PIN_A0); 
0683:  BSF    03.5
0684:  BCF    05.0
0685:  BCF    03.5
0686:  BSF    05.0
....................             output_LOW(PIN_A1); 
0687:  BSF    03.5
0688:  BCF    05.1
0689:  BCF    03.5
068A:  BCF    05.1
....................             securityLVL = 1; 
068B:  MOVLW  01
068C:  MOVWF  51
....................             WRITE_EEPROM(3, securityLVL); 
068D:  MOVF   0B,W
068E:  MOVWF  77
068F:  BCF    0B.7
0690:  MOVLW  03
0691:  BSF    03.5
0692:  MOVWF  1B
0693:  BCF    03.5
0694:  MOVF   51,W
0695:  BSF    03.5
0696:  MOVWF  1A
0697:  BCF    1C.7
0698:  BSF    1C.2
0699:  MOVLW  55
069A:  MOVWF  1D
069B:  MOVLW  AA
069C:  MOVWF  1D
069D:  BSF    1C.1
069E:  BTFSC  1C.1
069F:  GOTO   69E
06A0:  BCF    1C.2
06A1:  MOVF   77,W
06A2:  BCF    03.5
06A3:  IORWF  0B,F
....................             onehit = 1; 
06A4:  BSF    33.1
06A5:  CLRF   28
06A6:  BTFSC  0B.7
06A7:  BSF    28.7
06A8:  BCF    0B.7
....................             start(); 
06A9:  CALL   0DC
06AA:  BTFSC  28.7
06AB:  BSF    0B.7
....................             enable_interrupts(int_timer1); 
06AC:  BSF    03.5
06AD:  BSF    0C.0
06AE:  BCF    03.5
....................          } 
....................       } 
....................  
....................       MFRC522_Halt(); 
....................    } 
*
072C:  GOTO   799 (RETURN)
.................... } 
....................  
.................... void main() 
072D:  MOVF   03,W
072E:  ANDLW  1F
072F:  MOVWF  03
0730:  BSF    03.5
0731:  BSF    0E.3
0732:  MOVLW  19
0733:  MOVWF  19
0734:  MOVLW  A6
0735:  MOVWF  18
0736:  MOVLW  90
0737:  BCF    03.5
0738:  MOVWF  18
0739:  BCF    33.0
073A:  BCF    33.1
073B:  CLRF   35
073C:  CLRF   34
073D:  CLRF   36
073E:  CLRF   37
073F:  CLRF   38
0740:  CLRF   39
0741:  CLRF   3A
0742:  CLRF   50
0743:  CLRF   51
0744:  MOVLW  07
0745:  MOVWF  1F
0746:  BCF    03.7
.................... { 
....................  
....................    set_timer1(3036); 
*
074F:  CLRF   0E
0750:  MOVLW  0B
0751:  MOVWF  0F
0752:  MOVLW  DC
0753:  MOVWF  0E
....................    setup_timer_1(T1_INTERNAL | T1_DIV_BY_8); 
0754:  MOVLW  B5
0755:  MOVWF  10
....................    ENABLE_INTERRUPTS(GLOBAL);  // Se habilitan las interrupciones globales 
0756:  MOVLW  C0
0757:  IORWF  0B,F
....................    ENABLE_INTERRUPTS(INT_RDA); // Se habilitan la interrupcion por evento serial. 
0758:  BSF    03.5
0759:  BSF    0C.5
....................    ENABLE_INTERRUPTS(INT_EXT); // Se habilitan la interrupcion por evento Externo. 
075A:  BCF    03.5
075B:  BSF    0B.4
....................  
....................    cont = 0; 
075C:  CLRF   36
....................    onehit = 0; //Variable para desechar deteccion() una vez usada y evitar su activasion. 
075D:  BCF    33.1
....................  
....................    securityLVL = READ_EEPROM(3); 
075E:  MOVLW  03
075F:  BSF    03.5
0760:  MOVWF  1B
0761:  BCF    1C.7
0762:  BSF    1C.0
0763:  MOVF   1A,W
0764:  BCF    03.5
0765:  MOVWF  51
....................    set_tris_A(0x00); //Puerto D como salidas digitales. 
0766:  MOVLW  00
0767:  BSF    03.5
0768:  MOVWF  05
....................  
....................    MFRC522_Init(); 
0769:  BCF    03.5
076A:  GOTO   44E
....................    output_low(PIN_A0); 
076B:  BSF    03.5
076C:  BCF    05.0
076D:  BCF    03.5
076E:  BCF    05.0
....................    output_low(PIN_A1); 
076F:  BSF    03.5
0770:  BCF    05.1
0771:  BCF    03.5
0772:  BCF    05.1
....................    output_high(PIN_B3); 
0773:  BSF    03.5
0774:  BCF    06.3
0775:  BCF    03.5
0776:  BSF    06.3
....................    output_low(PIN_A7); 
0777:  BSF    03.5
0778:  BCF    05.7
0779:  BCF    03.5
077A:  BCF    05.7
....................  
....................    if (securityLVL == 0) 
077B:  MOVF   51,F
077C:  BTFSS  03.2
077D:  GOTO   78A
....................    { 
....................       output_LOW(PIN_A0); 
077E:  BSF    03.5
077F:  BCF    05.0
0780:  BCF    03.5
0781:  BCF    05.0
....................       output_HIGH(PIN_B3); 
0782:  BSF    03.5
0783:  BCF    06.3
0784:  BCF    03.5
0785:  BSF    06.3
....................       onehit = 1; 
0786:  BSF    33.1
....................       enable_interrupts(int_timer1); 
0787:  BSF    03.5
0788:  BSF    0C.0
0789:  BCF    03.5
078A:  CLRF   28
078B:  BTFSC  0B.7
078C:  BSF    28.7
078D:  BCF    0B.7
....................    } 
....................  
....................    delay_ms(50); 
078E:  MOVLW  32
078F:  BSF    03.5
0790:  MOVWF  25
0791:  BCF    03.5
0792:  CALL   03B
0793:  BTFSC  28.7
0794:  BSF    0B.7
....................    while (true) 
....................    { 
....................       if (securityLVL == 1 && onehit == 0) 
0795:  DECFSZ 51,W
0796:  GOTO   799
0797:  BTFSS  33.1
....................       { 
....................          deteccion(); 
0798:  GOTO   572
....................       } 
0799:  GOTO   795
....................    } 
.................... } 
079A:  SLEEP

Configuration Fuses:
   Word  1: 3F50   NOWDT PUT INTRC_IO NOMCLR BROWNOUT NOLVP NOCPD NOPROTECT
