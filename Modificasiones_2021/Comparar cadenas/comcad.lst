CCS PCM C Compiler, Version 5.015, 5967               24-ene.-21 13:53

               Filename:   C:\Users\0bytes\Desktop\0bytes\Prototipo2\Modificasiones_2021\Comparar cadenas\comcad.lst

               ROM used:   295 words (14%)
                           Largest free fragment is 1753
               RAM used:   44 (20%) at main() level
                           51 (23%) worst case
               Stack used: 3 locations (1 in main + 2 for interrupts)
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   0E6
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   7F,W
0009:  MOVWF  20
000A:  MOVF   0A,W
000B:  MOVWF  27
000C:  CLRF   0A
000D:  SWAPF  20,F
000E:  MOVF   04,W
000F:  MOVWF  22
0010:  MOVF   77,W
0011:  MOVWF  23
0012:  MOVF   78,W
0013:  MOVWF  24
0014:  MOVF   79,W
0015:  MOVWF  25
0016:  MOVF   7A,W
0017:  MOVWF  26
0018:  BCF    03.7
0019:  BCF    03.5
001A:  MOVLW  8C
001B:  MOVWF  04
001C:  BTFSS  00.5
001D:  GOTO   020
001E:  BTFSC  0C.5
001F:  GOTO   03A
0020:  MOVF   22,W
0021:  MOVWF  04
0022:  MOVF   23,W
0023:  MOVWF  77
0024:  MOVF   24,W
0025:  MOVWF  78
0026:  MOVF   25,W
0027:  MOVWF  79
0028:  MOVF   26,W
0029:  MOVWF  7A
002A:  MOVF   27,W
002B:  MOVWF  0A
002C:  SWAPF  21,W
002D:  MOVWF  03
002E:  SWAPF  7F,F
002F:  SWAPF  7F,W
0030:  RETFIE
.................... //Prototipo bytes0//MOTSAP-BETA 
.................... //Ingeniero Luis Eduardo Lerma J. 
.................... //Agosto 2019 
....................  
.................... #include <16F628A.h> 
.................... //////////// Standard Header file for the PIC16F628A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F628A 
0031:  BCF    0A.0
0032:  BCF    0A.1
0033:  BCF    0A.2
0034:  ADDWF  02,F
0035:  RETLW  62
0036:  RETLW  69
0037:  RETLW  65
0038:  RETLW  6E
0039:  RETLW  00
....................  
.................... #list 
....................  
.................... #fuses XT, BROWNOUT, NOLVP, NOWDT, PUT, NOMCLR 
.................... #use delay(internal = 4MHz) 
*
00D1:  MOVLW  47
00D2:  MOVWF  04
00D3:  BCF    03.7
00D4:  MOVF   00,W
00D5:  BTFSC  03.2
00D6:  GOTO   0E5
00D7:  MOVLW  01
00D8:  MOVWF  78
00D9:  CLRF   77
00DA:  DECFSZ 77,F
00DB:  GOTO   0DA
00DC:  DECFSZ 78,F
00DD:  GOTO   0D9
00DE:  MOVLW  4A
00DF:  MOVWF  77
00E0:  DECFSZ 77,F
00E1:  GOTO   0E0
00E2:  GOTO   0E3
00E3:  DECFSZ 00,F
00E4:  GOTO   0D7
00E5:  GOTO   125 (RETURN)
.................... #use rs232(baud = 9600, parity = N, XMIT = PIN_B2, RCV = PIN_B1, bits = 8) 
.................... fast_io(A); 
....................  
.................... //Variables - Sistema de seguridad 
.................... char a, b, c, d; 
.................... char e, f, g, h; 
.................... char clave[10]; 
.................... char edu[10]; 
.................... char control; 
.................... int8 num_faults = 0; 
.................... int8 SecurityLVL = 0; 
.................... /*TENER EN CUENTA 
....................  
.................... BLUETOOTH   RB3 
.................... ALARMA      RA1 
.................... START       RA7 
.................... ON/OFF      RA0 
....................  
.................... */ 
....................  
.................... void PassVerify() 
.................... { 
....................  
....................    gets(clave); 
*
0042:  MOVLW  30
0043:  MOVWF  04
0044:  BCF    03.7
0045:  DECF   04,F
0046:  INCF   04,F
0047:  BTFSS  0C.5
0048:  GOTO   047
0049:  MOVF   1A,W
004A:  MOVWF  00
004B:  MOVLW  0D
004C:  SUBWF  00,W
004D:  BTFSS  03.2
004E:  GOTO   046
004F:  CLRF   00
....................    strcpy(edu, clave); 
0050:  CLRF   4B
0051:  MOVLW  30
0052:  MOVWF  4A
0053:  CLRF   49
0054:  MOVLW  3A
0055:  MOVWF  48
0056:  MOVF   4A,W
0057:  MOVWF  04
0058:  BCF    03.7
0059:  BTFSC  4B.0
005A:  BSF    03.7
005B:  MOVF   00,W
005C:  MOVWF  4C
005D:  MOVF   48,W
005E:  MOVWF  04
005F:  BCF    03.7
0060:  BTFSC  49.0
0061:  BSF    03.7
0062:  MOVF   4C,W
0063:  MOVWF  00
0064:  MOVF   00,F
0065:  BTFSC  03.2
0066:  GOTO   06A
0067:  INCF   48,F
0068:  INCF   4A,F
0069:  GOTO   056
....................  
....................  
....................    a = edu; 
006A:  MOVLW  3A
006B:  MOVWF  28
....................    strcpy( d, READ_EEPROM(10)); 
006C:  MOVLW  0A
006D:  BSF    03.5
006E:  MOVWF  1B
006F:  BCF    1C.7
0070:  BSF    1C.0
0071:  MOVF   1A,W
0072:  BCF    03.5
0073:  MOVWF  48
0074:  CLRF   4C
0075:  MOVF   48,W
0076:  MOVWF  4B
0077:  CLRF   4A
0078:  MOVLW  2B
0079:  MOVWF  49
007A:  MOVF   4B,W
007B:  MOVWF  04
007C:  BCF    03.7
007D:  BTFSC  4C.0
007E:  BSF    03.7
007F:  MOVF   00,W
0080:  MOVWF  4D
0081:  MOVF   49,W
0082:  MOVWF  04
0083:  BCF    03.7
0084:  BTFSC  4A.0
0085:  BSF    03.7
0086:  MOVF   4D,W
0087:  MOVWF  00
0088:  MOVF   00,F
0089:  BTFSC  03.2
008A:  GOTO   08E
008B:  INCF   49,F
008C:  INCF   4B,F
008D:  GOTO   07A
....................  
....................    printf("%s",a); 
008E:  MOVF   28,W
008F:  MOVWF  04
0090:  BCF    03.7
0091:  BTFSC  29.0
0092:  BSF    03.7
0093:  MOVLW  00
0094:  IORWF  00,W
0095:  BTFSC  03.2
0096:  GOTO   09D
0097:  MOVF   00,W
0098:  BTFSS  0C.4
0099:  GOTO   098
009A:  MOVWF  19
009B:  INCF   04,F
009C:  GOTO   093
....................    printf("%s",d); 
009D:  MOVF   2B,W
009E:  MOVWF  04
009F:  BCF    03.7
00A0:  BTFSC  2C.0
00A1:  BSF    03.7
00A2:  MOVLW  00
00A3:  IORWF  00,W
00A4:  BTFSC  03.2
00A5:  GOTO   0AC
00A6:  MOVF   00,W
00A7:  BTFSS  0C.4
00A8:  GOTO   0A7
00A9:  MOVWF  19
00AA:  INCF   04,F
00AB:  GOTO   0A2
....................  
....................    if (a == d){ 
00AC:  MOVF   2B,W
00AD:  SUBWF  28,W
00AE:  BTFSS  03.2
00AF:  GOTO   0BE
....................      printf("bien"); 
00B0:  CLRF   48
00B1:  MOVF   48,W
00B2:  CALL   031
00B3:  INCF   48,F
00B4:  MOVWF  77
00B5:  MOVF   77,W
00B6:  BTFSS  0C.4
00B7:  GOTO   0B6
00B8:  MOVWF  19
00B9:  MOVLW  04
00BA:  SUBWF  48,W
00BB:  BTFSS  03.2
00BC:  GOTO   0B1
....................    }else{ 
00BD:  GOTO   0CA
....................       printf("mal"); 
00BE:  MOVLW  6D
00BF:  BTFSS  0C.4
00C0:  GOTO   0BF
00C1:  MOVWF  19
00C2:  MOVLW  61
00C3:  BTFSS  0C.4
00C4:  GOTO   0C3
00C5:  MOVWF  19
00C6:  MOVLW  6C
00C7:  BTFSS  0C.4
00C8:  GOTO   0C7
00C9:  MOVWF  19
....................    } 
....................  
.................... } 
....................  
.................... #INT_RDA // Interrupcion por serial. para recibir datos del movil 
.................... void serial_isr() 
.................... { 
....................    control = getc(); 
*
003A:  BTFSS  0C.5
003B:  GOTO   03A
003C:  MOVF   1A,W
003D:  MOVWF  44
....................    if (control == 'X' ){PassVerify();printf("z");} 
003E:  MOVF   44,W
003F:  SUBLW  58
0040:  BTFSS  03.2
0041:  GOTO   0CE
*
00CA:  MOVLW  7A
00CB:  BTFSS  0C.4
00CC:  GOTO   0CB
00CD:  MOVWF  19
00CE:  BCF    0C.5
00CF:  BCF    0A.3
00D0:  GOTO   020
.................... } 
....................  
....................  
....................  
.................... void main() 
*
00E6:  MOVF   03,W
00E7:  ANDLW  1F
00E8:  MOVWF  03
00E9:  BSF    03.5
00EA:  BSF    0E.3
00EB:  MOVLW  19
00EC:  MOVWF  19
00ED:  MOVLW  A6
00EE:  MOVWF  18
00EF:  MOVLW  90
00F0:  BCF    03.5
00F1:  MOVWF  18
00F2:  CLRF   45
00F3:  CLRF   46
00F4:  MOVLW  07
00F5:  MOVWF  1F
00F6:  BCF    03.7
.................... { 
....................  
....................    ENABLE_INTERRUPTS(GLOBAL);  // Se habilitan las interrupciones globales 
00F7:  MOVLW  C0
00F8:  IORWF  0B,F
....................    ENABLE_INTERRUPTS(INT_RDA); // Se habilitan la interrupcion por evento serial. 
00F9:  BSF    03.5
00FA:  BSF    0C.5
....................  
....................  
....................    set_tris_A(0x00); //Puerto D como salidas digitales. 
00FB:  MOVLW  00
00FC:  MOVWF  05
....................    WRITE_EEPROM(10,"1996"); 
00FD:  BCF    03.5
00FE:  MOVF   0B,W
00FF:  MOVWF  77
0100:  BCF    0B.7
0101:  MOVLW  0A
0102:  BSF    03.5
0103:  MOVWF  1B
0104:  MOVWF  1A
0105:  BCF    1C.7
0106:  BSF    1C.2
0107:  MOVLW  55
0108:  MOVWF  1D
0109:  MOVLW  AA
010A:  MOVWF  1D
010B:  BSF    1C.1
010C:  BTFSC  1C.1
010D:  GOTO   10C
010E:  BCF    1C.2
010F:  MOVF   77,W
0110:  BCF    03.5
0111:  IORWF  0B,F
....................  
....................    output_low(PIN_A0); 
0112:  BSF    03.5
0113:  BCF    05.0
0114:  BCF    03.5
0115:  BCF    05.0
....................    output_low(PIN_A1); 
0116:  BSF    03.5
0117:  BCF    05.1
0118:  BCF    03.5
0119:  BCF    05.1
....................    output_high(PIN_B3); 
011A:  BSF    03.5
011B:  BCF    06.3
011C:  BCF    03.5
011D:  BSF    06.3
....................    output_low(PIN_A7); 
011E:  BSF    03.5
011F:  BCF    05.7
0120:  BCF    03.5
0121:  BCF    05.7
....................  
....................  
....................  
....................  
....................    delay_ms(50); 
0122:  MOVLW  32
0123:  MOVWF  47
0124:  GOTO   0D1
....................    while (true) 
....................    { 
0125:  GOTO   125
....................  
....................    } 
.................... } 
0126:  SLEEP

Configuration Fuses:
   Word  1: 3F50   NOWDT PUT INTRC_IO NOMCLR BROWNOUT NOLVP NOCPD NOPROTECT
